# SPECYFIKACJA KOMPLETNA: STREAMLIT COVERED CALL DASHBOARD
## Zarządzanie portfelem opcji pokrytych z rozliczeniami podatkowymi PL

**Status: 62/100 punktów ukończone (62%)**  
**Ostatnia aktualizacja: 2025-01-26**  
**Aktualny milestone: PUNKT 62-63 - Poprawki yield calculations**

---

## 🎯 OGÓLNY OPIS PROJEKTU

### Kontekst biznesowy
- **Broker**: Lynx (IBKR)
- **Dane**: Ręczne wprowadzanie w Streamlit (brak importów)
- **Konto**: Jedno w USD
- **Rozliczenia**: Każda operacja przeliczana na PLN wg kursu NBP D-1; kurs i kwota PLN utrwalone w bazie

### Rozliczenia podatkowe
- **PIT-38**: akcje, opcje CC, prowizje, odsetki od margin, odsetki od gotówki, stock lending
- **PIT-36**: dywidendy (15% WHT + 4% dopłata)
- **Uwaga**: Przewalutowania walut na rachunku nie są księgowane do PIT

### Moduły aplikacji (9 kart w Streamlit)
1. **Dashboard**: KPI, equity (USD, MTM), yieldy, alerty
2. **Stocks**: zakupy w LOT-ach, sprzedaże FIFO, blokady pod CC
3. **Options (CC)**: sprzedaż, buyback, expiry, rolowanie, rezerwacje FIFO
4. **CC Chains**: łańcuchy opcyjne, tracking strategii, analytics 🆕
5. **Dividends**: brutto USD → PLN, WHT 15%, dopłata 4%, netto
6. **Cashflows**: pełny dziennik wszystkich przepływów pieniężnych
7. **Taxes**: rozbicia PIT-38/PIT-36, eksporty CSV
8. **Stats**: yieldy CC/dividend, P/L per ticker i całościowo
9. **Charts**: equity curve, cashflow, pie charts, histogramy P/L

---

## 🏗️ ETAP 1: FUNDAMENT APLIKACJI (punkty 1-15) ✅ UKOŃCZONY

### Punkty 1-5: Struktura podstawowa ✅
1. ✅ Utworzenie struktury katalogów (app.py, db.py, structure.py, utils/, pages/)
2. ✅ Inicjalizacja głównej aplikacji Streamlit z pustą strukturą nawigacji
3. ✅ Konfiguracja połączenia z bazą SQLite (portfolio.db)
4. ✅ Utworzenie podstawowego layout'u aplikacji z sidebar navigation
5. ✅ Testowanie uruchomienia aplikacji (streamlit run app.py)

### Punkty 6-10: Baza danych i modele ✅
6. ✅ Implementacja tabeli fx_rates (struktura + podstawowe operacje CRUD)
7. ✅ Implementacja tabeli cashflows (struktura + podstawowe operacje CRUD) 
8. ✅ Implementacja tabeli lots (struktura + podstawowe operacje CRUD)
9. ✅ Implementacja tabeli stock_trades i stock_trade_splits
10. ✅ Implementacja pozostałych tabel (options_cc, dividends, market_prices)

### Punkty 11-15: Utilities podstawowe ✅
11. ✅ Implementacja utils/formatting.py (formatowanie liczb, walut, dat)
12. ✅ Implementacja pobierania kursów NBP z obsługą weekendów/świąt
13. ✅ Implementacja cache'owania kursów NBP w bazie
14. ✅ Testowanie pobierania i zapisywania kursów NBP
15. ✅ Seed database - utworzenie testowych kursów NBP na ostatnie 30 dni

**Status ETAP 1**: ✅ **KOMPLETNY** - Fundament aplikacji gotowy

---

## 💸 ETAP 2: MODUŁ CASHFLOWS (punkty 16-30) ✅ UKOŃCZONY

### Punkty 16-20: Cashflows - struktura i logika ✅
16. ✅ Utworzenie pages/cashflows.py z podstawową strukturą
17. ✅ Implementacja formularza dodawania cashflow (wpłaty/wypłaty)
18. ✅ Implementacja automatycznego pobierania kursu NBP D-1 w formularzu
19. ✅ Implementacja zapisu cashflow z utrwaleniem fx_rate i amount_pln
20. ✅ Testowanie dodawania wpłat/wypłat z różnymi datami (włącznie z weekendami)

### Punkty 21-25: Cashflows - UI i funkcjonalności ✅
21. ✅ Implementacja tabeli wyświetlającej wszystkie cashflows
22. ✅ Dodanie filtrów (typ operacji, zakres dat, kwoty)
23. ✅ Implementacja edycji i usuwania cashflows
24. ✅ Dodanie walidacji (ujemne wypłaty, dodatnie wpłaty)
25. ✅ Implementacja możliwości ręcznej korekty kursu przed zapisem

### Punkty 26-30: Cashflows - finalizacja ✅
26. ✅ Dodanie kolumny z linkami do operacji źródłowych (ref_table, ref_id)
27. ✅ Implementacja eksportu do CSV
28. ✅ Dodanie statystyk cashflow (suma wpłat, wypłat, saldo)
29. ✅ Testowanie pełnej funkcjonalności modułu cashflows
30. ✅ Dokumentacja i refaktoryzacja kodu cashflows

**Status ETAP 2**: ✅ **KOMPLETNY** - Moduł Cashflows z filtrami, edycją, eksportem CSV

---

## 📊 ETAP 3: MODUŁ STOCKS (punkty 31-50) ✅ UKOŃCZONY

### Punkty 31-35: Stocks - zakupy (LOT-y) ✅
31. ✅ Utworzenie pages/stocks.py z podstawową strukturą
32. ✅ Implementacja formularza dodawania LOT-a (ticker, quantity, price, date)
33. ✅ Automatyczne pobieranie kursu NBP D-1 i wyliczanie cost_pln
34. ✅ Implementacja zapisu LOT-a z prowizjami (broker_fee, reg_fee)
35. ✅ Dodanie automatycznego tworzenia cashflow przy zakupie akcji

### Punkty 36-40: Stocks - logika FIFO ✅
36. ✅ Implementacja algorytmu FIFO (sortowanie po buy_date, potem po id)
37. ✅ Implementacja funkcji sprawdzającej dostępne quantity_open dla tickera
38. ✅ Implementacja podglądu alokacji FIFO przed sprzedażą
39. ✅ Testowanie FIFO na różnych scenariuszach (częściowe sprzedaże, różne daty)
40. ✅ Implementacja walidacji - nie można sprzedać więcej niż quantity_open

### Punkty 41-45: Stocks - sprzedaże ✅
41. ✅ Implementacja formularza sprzedaży akcji
42. ✅ Automatyczne rozbijanie sprzedaży na LOT-y według FIFO
43. ✅ Proporcjonalne dzielenie prowizji sprzedażowej na LOT-y
44. ✅ Kalkulacja P/L per LOT i całościowy P/L sprzedaży
45. ✅ Implementacja zapisu stock_trades i stock_trade_splits

### Punkty 46-50: Stocks - UI i finalizacja ✅
46. ✅ Implementacja tabeli LOT-ów (quantity_open, koszt PLN, kurs, daty)
47. ✅ Implementacja tabeli sprzedaży z rozbiciami po LOT-ach
48. ✅ Dodanie filtrów i sortowania w tabelach
49. ✅ Implementacja eksportu stocks do CSV
50. ✅ Testowanie pełnej funkcjonalności modułu stocks

**Status ETAP 3**: ✅ **KOMPLETNY** - Moduł Stocks z LOT-ami, FIFO, tabelami, eksportami

---

## 🎯 ETAP 4: MODUŁ OPTIONS - COVERED CALLS (punkty 51-70) ✅ UKOŃCZONY

### Punkty 51-55: Options - struktura i rezerwacje ✅
51. ✅ Utworzenie pages/options.py z podstawową strukturą
52. ✅ Implementacja logiki rezerwacji akcji FIFO dla CC
53. ✅ Implementacja sprawdzania dostępności pokrycia przed zapisem CC
54. ✅ Implementacja formularza sprzedaży CC (ticker, contracts, strike, premium, expiry)
55. ✅ Implementacja zapisu options_cc z rezerwacją quantity_open w lots

### Punkty 56-60: Options - operacje CC ✅
56. ✅ Implementacja automatycznego tworzenia cashflow przy sprzedaży CC
57. ✅ Implementacja formularza buyback CC
58. ✅ Implementacja oznaczania CC jako expired (close_date = expiry_date)
59. ✅ Kalkulacja P/L dla bought_back i expired CC w PLN
60. ✅ Implementacja zwalniania rezerwacji akcji przy zamknięciu CC

### Punkty 61-65: Options - blokady i walidacje ✅
61. ✅ Implementacja blokady sprzedaży akcji pod otwartymi CC
62. ✅ **NAPRAWIONY** - Poprawka kalkulacji yield w historii CC (premium_sell_usd → total)
63. ✅ **NAPRAWIONY** - Usunięcie annualized yield dla zamkniętych CC (pozostały tylko zwykły yield)
64. ✅ Dodanie przycisków usuwania błędnych CC (z automatycznym zwalnianiem rezerwacji)
65. ⏳ Implementacja edycji parametrów CC + usuwania rekordów testowych

### Punkty 66-70: Options - UI i finalizacja 🔄
66. ✅ Implementacja zaawansowanych tabel otwartych CC z rozbiciami po LOT-ach
67. ✅ Implementacja tabel zamkniętych CC z P/L PLN i kursami open/close
68. ✅ **CLEANUP** - Usunięto wszystkie komunikaty deweloperskie z UI
69. ⏳ Implementacja eksportu options do CSV + narzędzia cleanup
70. ⏳ Testowanie pełnej funkcjonalności modułu options + finalizacja profesjonalnego UI

**Status ETAP 4**: 🔄 **62/70 ukończone (89%)** - Options prawie gotowe!

---

## 💰 ETAP 5: MODUŁ CC CHAINS - ŁAŃCUCHY OPCYJNE (punkty 71-85) 🆕 PLANOWANY

### Punkty 71-75: CC Chains - struktura i logika podstawowa ⏳
71. ⏳ Utworzenie tabeli cc_chains w bazie danych (id, ticker, start_date, end_date, status)
72. ⏳ Dodanie chain_id do tabeli options_cc (foreign key + migracja)
73. ⏳ Utworzenie pages/cc_chains.py z podstawową strukturą nawigacji
74. ⏳ Implementacja algorytmu auto-detection chains (CC w ciągu 7 dni = ten sam chain)
75. ⏳ Implementacja funkcji tworzenia i zarządzania chains w db.py

### Punkty 76-80: CC Chains - analytics i kalkulacje ⏳
76. ⏳ Implementacja kalkulacji łącznego P/L per chain (suma wszystkich CC)
77. ⏳ Wyliczanie duration chains (dni między pierwszym a ostatnim CC)
78. ⏳ Kalkulacja annualized return per chain i success rate
79. ⏳ Implementacja rankingu chains (best/worst performers)
80. ⏳ Dodanie metryk: avg P/L per transaction, total premium captured

### Punkty 81-85: CC Chains - UI i finalizacja ⏳
81. ⏳ Tab "Active Chains" - bieżące łańcuchy z live tracking
82. ⏳ Tab "Chain Analytics" - historia, performance comparison, wykresy
83. ⏳ Tab "Chain Management" - ręczne łączenie/rozłączanie, edycja
84. ⏳ Implementacja mini-dashboardów per chain z wszystkimi metrykami
85. ⏳ Eksport chain analytics do CSV i testowanie pełnej funkcjonalności

**Status ETAP 5**: ⏳ **NOWY MODUŁ** - Zaawansowana analiza strategii CC!

---

## 💰 ETAP 6: MODUŁ DIVIDENDS (punkty 86-95) ⏳ PLANOWANY

### Punkty 86-90: Dividends - logika podstawowa ⏳
86. ⏳ Utworzenie pages/dividends.py z podstawową strukturą
87. ⏳ Implementacja formularza dywidend (ticker, gross_usd, date_paid)
88. ⏳ Automatyczne wyliczanie WHT 15% i dopłaty 4%
89. ⏳ Implementacja zapisu dividends z wszystkimi polami PLN
90. ⏳ Automatyczne tworzenie cashflow typu 'dividend'

### Punkty 91-95: Dividends - UI i finalizacja ⏳
91. ⏳ Implementacja tabeli dywidend z rozbiciami (brutto, WHT, dopłata, netto)
92. ⏳ Dodanie filtrów i sortowania + przyciski edycji/usuwania dywidend
93. ⏳ Implementacja eksportu dividends do CSV
94. ⏳ Integracja z modułem taxes (kategoria PIT-36)
95. ⏳ Testowanie pełnej funkcjonalności modułu dividends + cleanup błędnych rekordów

**Status ETAP 6**: ⏳ **PLANOWANY** - Start po ukończeniu ETAPU 5

---

## 📋 ETAP 7: MODUŁ TAXES - ROZLICZENIA PODATKOWE (punkty 96-105) ⏳ PLANOWANY

### Punkty 96-100: Taxes - logika PIT ⏳
96. ⏳ Utworzenie pages/taxes.py i utils/tax.py
97. ⏳ Implementacja logiki PIT-38 (przychody i koszty)
98. ⏳ Implementacja logiki PIT-36 (dywidendy z rozbiciami)
99. ⏳ Implementacja agregacji danych z wszystkich modułów
100. ⏳ Kalkulacja sum dla PIT-38 (razem przychody/koszty) i PIT-36 + narzędzia administracyjne

### Punkty 101-105: Taxes - raporty i eksporty ⏳
101. ⏳ Implementacja szczegółowych tabel rozbić PIT-38/PIT-36 + batch operations
102. ⏳ Implementacja eksportów CSV (PIT-38.csv, PIT-36.csv)
103. ⏳ Dodanie filtrów okresowych (rok podatkowy, kwartały) + zarządzanie błędami podatkowymi
104. ⏳ Implementacja dodatkowych eksportów (Cashflows.csv, etc.) + audit trail
105. ⏳ Testowanie poprawności kalkulacji podatkowych + backup/restore narzędzia

**Status ETAP 7**: ⏳ **PLANOWANY** - Start po ukończeniu ETAPU 6

---

## 📈 ETAP 8: DASHBOARD I FINALIZACJA (punkty 106-110) ⏳ PLANOWANY

### Punkty 106-110: Dashboard - KPI i finalizacja projektu ⏳
106. ⏳ Utworzenie pages/dashboard.py z zaawansowaną strukturą + integracja z yfinance
107. ⏳ Implementacja KPI (wartość portfela USD, wolna gotówka, P/L YTD, CC chains overview)
108. ⏳ Implementacja yield calculations (CC yield, dividend yield, chain performance)
109. ⏳ Implementacja systemu alertów (expiry, pokrycie, yieldy) + stats.py z yield analizami
110. ⏳ **FINALIZACJA**: Utworzenie pages/charts.py, usunięcie ALL deweloperskich info, dokumentacja końcowa

**Status ETAP 8**: ⏳ **PLANOWANY** - Finalizacja i release production-ready

---

## 🗑️ NOWE FUNKCJONALNOŚCI - ZARZĄDZANIE DANYMI

### **Dodane do specyfikacji w trakcie realizacji:**

#### **PUNKT 62-63: NAPRAWKI YIELD CALCULATIONS (ETAP 4)** ✅
- 🔧 **Poprawka premium_sell_usd** - teraz zapisuje total za wszystkie kontrakty (nie per kontrakt)
- 🔧 **Poprawka premium_sell_pln** - teraz zapisuje brutto (nie netto po prowizjach)
- 🚫 **Usunięcie annualized yield** z historii CC - pozostał tylko zwykły yield %
- 📊 **Logiczna kalkulacja** - yield bazuje na rzeczywistym P/L vs premium sprzedaży
- ✅ **Sensowne metryki** - np. -20% zamiast absurdalnych -7300% p.a.

#### **PUNKT 64-65: Zarządzanie błędami (ETAP 4)**
- 🗑️ **Usuwanie błędnych operacji** w każdym module (CC, stocks, cashflows, dividends)
- 🔄 **Edycja parametrów** przed zapisem
- ⚠️ **Potwierdzenia bezpieczeństwa** przed usunięciem
- 🧹 **Cleanup rekordów testowych** (bulk operations)
- 🔒 **Zabezpieczenia** przed przypadkowym usunięciem

#### **PUNKT 67-68: Oczyszczanie UI (ETAP 4)** ✅
- 🚫 **Usunięto komunikaty "PUNKT X UKOŃCZONY"** z wszystkich modułów
- 🚫 **Usunięto testowe buttony** i debug info
- 🚫 **Usunięto szczegóły implementacyjne** z UI
- ✨ **Profesjonalne komunikaty** zamiast deweloperskich
- 📱 **Responsive design** dla różnych urządzeń

#### **PUNKT 85-86: Zaawansowane zarządzanie (ETAP 6)** ⏳
- 🗄️ **Backup/restore** bazy danych
- 🧹 **Cleanup narzędzia** (usuwanie starych danych)
- 🔍 **Audit trail** (kto, kiedy, co usunął)
- 📦 **Bulk operations** (masowe usuwanie/edytowanie)
- 🚚 **Export/import** danych

#### **PUNKT 98-99: Finalna profesjonalizacja (ETAP 7)** ⏳
- 🎨 **Usunięcie WSZYSTKICH** pozostałości deweloperskich
- ✨ **Finalne UI/UX** na poziomie produkcyjnym
- 📋 **Instrukcje użytkownika** zamiast dokumentacji technicznej
- 🏆 **Production-ready release**

---

## 🎯 KRYTERIA AKCEPTACJI

### ✅ Must-have (MVP)
- [x] Każda operacja ma utrwalony kurs NBP D-1 i kwoty PLN
- [x] FIFO sprzedaży działa i pokazuje rozbicie po LOT-ach  
- [x] Blokada sprzedaży akcji pod otwartym CC
- [x] **Poprawne kalkulacje yield** - realistyczne % zwroty z operacji CC
- [ ] Rolowanie jako dwie osobne operacje
- [ ] Dashboard z equity (USD), yieldami i alertami
- [ ] Taxes z rozbiciami PIT-38/PIT-36 i eksportami CSV
- [x] Kursy NBP pobierane automatycznie z możliwością korekty

### 🎯 Nice-to-have (Future)
- [ ] Import danych z IBKR/Lynx
- [ ] Zaawansowane wykresy (Plotly)
- [ ] Corporate actions handling
- [ ] Multi-account support
- [ ] Mobile-responsive UI

---

## 📊 PROGRESS TRACKING

**Aktualny stan: 62/110 punktów (56%)**

### Status per etap:
- ✅ **ETAP 1** (1-15): 15/15 = 100% ✅
- ✅ **ETAP 2** (16-30): 15/15 = 100% ✅  
- ✅ **ETAP 3** (31-50): 20/20 = 100% ✅
- 🔥 **ETAP 4** (51-70): 12/20 = 60% 🔄
- 🆕 **ETAP 5** (71-85): 0/15 = 0% ⏳ CC CHAINS
- ⏳ **ETAP 6** (86-95): 0/10 = 0% ⏳ DIVIDENDS
- ⏳ **ETAP 7** (96-105): 0/10 = 0% ⏳ TAXES  
- ⏳ **ETAP 8** (106-110): 0/5 = 0% ⏳ DASHBOARD

### Najbliższe milestone:
🎯 **PUNKT 65**: Finalizacja edycji CC
🎯 **PUNKT 70**: Ukończenie ETAPU 4 = 64% projektu!
🎯 **PUNKT 85**: CC Chains kompletne = 77% projektu! 🆕

---

## 🚀 PLAN REALIZACJI - NASTĘPNE KROKI

### **Za 1 tydzień (punkty 65-70):**
- Finalizacja edycji parametrów CC
- Eksport options do CSV
- Testowanie pełnej funkcjonalności
- **UKOŃCZENIE ETAPU 4 = 64% projektu!**

### **Za 2 tygodnie (punkty 71-85):**
- 🆕 **CC Chains** - tabela, auto-detection, UI
- Zaawansowana analiza strategii opcyjnych
- **UKOŃCZENIE ETAPU 5 = 77% projektu!** 🔗

### **Za 4 tygodnie (punkty 86-95):**
- Pełny moduł Dividends  
- **UKOŃCZENIE ETAPU 6 = 86% projektu!**

### **Za 6 tygodni (punkty 96-105):**
- Pełny moduł Taxes
- **UKOŃCZENIE ETAPU 7 = 95% projektu!**

### **Za 8 tygodni (punkty 106-110):**
- Dashboard, Charts, finalizacja
- **🏆 RELEASE PRODUCTION-READY = 100%!**

---

## 🛠️ NAPRAWKI WYKONANE (26.01.2025)

### **PUNKT 62: Naprawa kalkulacji premium_sell_usd/pln** ✅
**Problem:** Premium zapisywane było per kontrakt (5$) zamiast total (500$)
**Rozwiązanie:** Poprawione w `show_cc_sell_preview()` w options.py:
```python
# PRZED (błędne):
cc_data = {'premium_sell_usd': premium_received}  # per kontrakt

# PO (poprawne):
cc_data = {'premium_sell_usd': total_premium_usd}  # total za wszystkie
```

### **PUNKT 63: Usunięcie absurdalnych yield p.a. z historii CC** ✅
**Problem:** Historia CC pokazywała -7300% p.a. dla 1-dniowych operacji
**Rozwiązanie:** Usunięto linię z annualized yield w `show_cc_history_tab()`:
```python
# USUNIĘTO:
st.write(f"📈 **Yield p.a.**: {premium_yield * 365.0 / days_held:.1f}%")

# ZOSTAŁO tylko:
st.write(f"📈 **Yield**: {premium_yield:.1f}%")
```

**Rezultat:** Teraz historia CC pokazuje sensowne metryki jak -20% zamiast -7300% p.a.

---

**Ostatnia aktualizacja**: 2025-01-26  
**Przez**: Assistant Claude  
**Status**: PUNKT 62-63 ukończone - Yield calculations naprawione!  
**Następny milestone**: PUNKT 65-70 - Finalizacja ETAPU 4